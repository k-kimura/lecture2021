;; scale 0.75 of pedal-racer-kxrl2w2l5a4h2-extern.wbt
(setq *dx-pedal-racer* 30)
(setq *dy-pedal-racer* 30)
(setq *dz-pedal-racer* 60)

;; ;; scale 0.6 of pedal-racer-kxrl2w2l5a4h2-extern.wbt
;; (setq *dx-pedal-racer* 30)
;; (setq *dy-pedal-racer* 20)
;; (setq *dz-pedal-racer* 60)

(defun init-pose-pedal-racer ()
  (send *robot* :reset-pose)
  (send *robot* :fix-leg-to-coords (make-coords))
  (send *robot* :rarm-shoulder-r :joint-angle -90)
  (send *robot* :larm-shoulder-r :joint-angle 90)
  (send *robot* :inverse-kinematics (send (send *robot* :rleg :end-coords :copy-worldcoords) :translate (float-vector 0 (- *dy-pedal-racer*) *dz-pedal-racer*) :world) :move-target (send *robot* :rleg :end-coords) :link-list (send *robot* :link-list (send (send *robot* :rleg :end-coords) :parent)))
  (send *robot* :inverse-kinematics (send (send *robot* :lleg :end-coords :copy-worldcoords) :translate (float-vector 0 *dy-pedal-racer* 0) :world) :move-target (send *robot* :lleg :end-coords) :link-list (send *robot* :link-list (send (send *robot* :lleg :end-coords) :parent)))
  (send *robot* :move-centroid-on-foot :both '(:rleg :lleg))
  (setq *av0-pedal-racer* (send *robot* :angle-vector))
  (send *robot* :angle-vector *av0-pedal-racer*)
  (send *irtviewer* :draw-objects)
  )

(warn ";; (send-init-pose-pedal-racer)~%")
(defun send-init-pose-pedal-racer ()
  (init-pose-pedal-racer)
  (send-webots)
  )

;; (defun next-pose-pedal-racer ()
;;   (send *robot* :reset-pose)
;;   (send *robot* :fix-leg-to-coords (make-coords))
;;   (send *robot* :rarm-shoulder-r :joint-angle -90)
;;   (send *robot* :larm-shoulder-r :joint-angle 90)
;;   (send *robot* :inverse-kinematics (send (send *robot* :rleg :end-coords :copy-worldcoords) :translate (float-vector 0 (- *dy-pedal-racer*) 0) :world) :move-target (send *robot* :rleg :end-coords) :link-list (send *robot* :link-list (send (send *robot* :rleg :end-coords) :parent)))
;;   (send *robot* :inverse-kinematics (send (send *robot* :lleg :end-coords :copy-worldcoords) :translate (float-vector 0 *dy-pedal-racer* *dz-pedal-racer*) :world) :move-target (send *robot* :lleg :end-coords) :link-list (send *robot* :link-list (send (send *robot* :lleg :end-coords) :parent)))
;;   (send *robot* :move-centroid-on-foot :both '(:rleg :lleg))
;;   ;; (send *robot* :move-centroid-on-foot :rleg '(:rleg :lleg))
;;   (setq *av1-pedal-racer* (send *robot* :angle-vector))
;;   (send *robot* :angle-vector *av1-pedal-racer*)
;;   (send *irtviewer* :draw-objects)
;;   )

(defun next-pose-pedal-racer ()
  (init-pose-pedal-racer)
  (send *robot* :inverse-kinematics (send (send *robot* :rleg :end-coords :copy-worldcoords) :translate (float-vector (/ *dz-pedal-racer* 2.0) 0 (- (/ *dz-pedal-racer* 2.0))) :world) :move-target (send *robot* :rleg :end-coords) :link-list (send *robot* :link-list (send (send *robot* :rleg :end-coords) :parent)))
  (send *robot* :inverse-kinematics (send (send *robot* :lleg :end-coords :copy-worldcoords) :translate (float-vector (- (/ *dz-pedal-racer* 2.0)) 0 (/ *dz-pedal-racer* 2.0)) :world) :move-target (send *robot* :lleg :end-coords) :link-list (send *robot* :link-list (send (send *robot* :lleg :end-coords) :parent)))
  ;; (send *robot* :move-centroid-on-foot :both '(:rleg :lleg))
  ;; (send *robot* :move-centroid-on-foot :both '(:rleg :lleg) :target-centroid-pos (float-vector 20 0 0))
  ;; (send *robot* :move-centroid-on-foot :both '(:rleg :lleg) :target-centroid-pos (float-vector 20 -30 0)) ;; best (paddle and fall)
  (send *robot* :move-centroid-on-foot :both '(:rleg :lleg) :target-centroid-pos (float-vector 0 -30 0)) ;; best (a little paddle and not fall)
  ;; (send *robot* :move-centroid-on-foot :both '(:rleg :lleg) :target-centroid-pos (float-vector 10 -30 0))
  (setq *av1-pedal-racer* (send *robot* :angle-vector))
  (send *robot* :angle-vector *av1-pedal-racer*)
  (send *irtviewer* :draw-objects)
  )

(defun next2-pose-pedal-racer ()
  (send *robot* :reset-pose)
  (send *robot* :fix-leg-to-coords (make-coords))
  (send *robot* :rarm-shoulder-r :joint-angle -90)
  (send *robot* :larm-shoulder-r :joint-angle 90)
  (send *robot* :inverse-kinematics (send (send *robot* :rleg :end-coords :copy-worldcoords) :translate (float-vector 0 (- *dy-pedal-racer*) 0) :world) :move-target (send *robot* :rleg :end-coords) :link-list (send *robot* :link-list (send (send *robot* :rleg :end-coords) :parent)))
  (send *robot* :inverse-kinematics (send (send *robot* :lleg :end-coords :copy-worldcoords) :translate (float-vector 0 *dy-pedal-racer* *dz-pedal-racer*) :world) :move-target (send *robot* :lleg :end-coords) :link-list (send *robot* :link-list (send (send *robot* :lleg :end-coords) :parent)))
  (send *robot* :move-centroid-on-foot :both '(:rleg :lleg))
  (setq *av2-pedal-racer* (send *robot* :angle-vector))
  (send *robot* :angle-vector *av2-pedal-racer*)
  (send *irtviewer* :draw-objects)
  )

;; (defun next-pose-pedal-racer ()
;;   (send *robot* :reset-pose)
;;   (send *robot* :fix-leg-to-coords (make-coords))
;;   (send *robot* :rarm-shoulder-r :joint-angle -90)
;;   (send *robot* :larm-shoulder-r :joint-angle 90)
;;   (send *robot* :inverse-kinematics (send (send *robot* :rleg :end-coords :copy-worldcoords) :translate (float-vector *dx-pedal-racer* (- *dy-pedal-racer*) 0) :world) :move-target (send *robot* :rleg :end-coords) :link-list (send *robot* :link-list (send (send *robot* :rleg :end-coords) :parent)))
;;   (send *robot* :inverse-kinematics (send (send *robot* :lleg :end-coords :copy-worldcoords) :translate (float-vector (- *dx-pedal-racer*) *dy-pedal-racer* 0) :world) :move-target (send *robot* :lleg :end-coords) :link-list (send *robot* :link-list (send (send *robot* :lleg :end-coords) :parent)))
;;   ;; (send *robot* :move-centroid-on-foot :both '(:rleg :lleg))
;;   (send *robot* :move-centroid-on-foot :both '(:rleg :lleg) :target-centroid-pos (float-vector 0 -20 0))
;;   (setq *av1-pedal-racer* (send *robot* :angle-vector))
;;   (send *robot* :angle-vector *av1-pedal-racer*)
;;   (send *irtviewer* :draw-objects)
;;   )

;; (defun next-pose-pedal-racer ()
;;   (init-pose-pedal-racer)
;;   ;; (send *robot* :move-centroid-on-foot :both '(:rleg :lleg) :target-centroid-pos (float-vector 20 -10 0))
;;   ;; (send *robot* :move-centroid-on-foot :both '(:rleg :lleg) :target-centroid-pos (float-vector 0 -10 0))
;;   (send *robot* :move-centroid-on-foot :rleg '(:rleg))
;;   (send *robot* :inverse-kinematics (send (send *robot* :lleg :end-coords :copy-worldcoords) :translate (float-vector 0 *dy-pedal-racer* (/ *dz-pedal-racer* 2.0)) :world) :move-target (send *robot* :lleg :end-coords) :link-list (send *robot* :link-list (send (send *robot* :lleg :end-coords) :parent)))
;;   (setq *av1-pedal-racer* (send *robot* :angle-vector))
;;   (send *robot* :angle-vector *av1-pedal-racer*)
;;   (send *irtviewer* :draw-objects)
;;   )

(warn ";; (send-next-pose-pedal-racer)~%")
;; (defun send-next-pose-pedal-racer ()
;;   (next-pose-pedal-racer)
;;   (send-webots)
;;   ;; (unix:sleep 5)
;;   ;; (warn ";; 5s~%")
;;   (read-line)
;;   (next2-pose-pedal-racer)
;;   (send-webots)
;;   )
(defun send-next-pose-pedal-racer ()
  (next-pose-pedal-racer)
  (send-webots)
  )
